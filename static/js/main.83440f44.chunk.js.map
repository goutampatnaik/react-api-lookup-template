{"version":3,"sources":["components/search/search.module.css","components/displayList/displayItem/displayItem.module.scss","components/displayList/displayList.module.css","components/ui/button/button.module.css","components/ui/button/button.js","components/search/search.js","components/displayList/displayItem/displayItem.js","components/displayList/displayList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","onClickHandler","submit","type","className","classes","onClick","SearchOptions","searchTerm","resultsPerPage","pageNumber","Search","totalRecords","clickHandler","searchTermRef","useRef","resultsPerPageRef","pageNumberRef","useState","pages","setPages","useEffect","pageCount","Math","ceil","current","value","tempPages","counter","push","Container","InputContainer","htmlFor","name","TextInput","ref","placeholder","onChange","map","item","index","key","disabled","length","event","preventDefault","DisplayItem","address","city","image_url","src","alt","Info","Name","API_URL","DisplayList","props","searchQuery","setSearchQuery","resultList","setResultList","loading","setLoading","perPage","currentPage","pagination","setPagination","url","replace","fetch","then","response","json","error","Error","total_entries","per_page","current_page","restaurants","r","id","catch","console","result","searchObject","DisplayLayout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,eAAiB,iC,gBCAzED,EAAOC,QAAU,CAAC,YAAc,iCAAiC,KAAO,0BAA0B,KAAO,4B,gBCAzGD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,cAAgB,qC,kBCA7ED,EAAOC,QAAU,CAAC,OAAS,yB,sMCcZC,MAXf,YAA6C,IAA3BC,EAA0B,EAA1BA,eAAgBC,EAAU,EAAVA,OACjC,OACC,4BACCC,KAAMD,GAAU,SAChBE,UAAWC,IAAQL,OACnBM,QAASL,GAHV,WCCWM,EAAgB,CAC5BC,WAAY,GACZC,eAAgB,CAAC,EAAG,GAAI,IACxBC,WAAY,GA8EEC,MA3Ef,YAAiD,IAA/BC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aACzBC,EAAgBC,iBAAO,IACvBC,EAAoBD,iBAAO,GAC3BE,EAAgBF,iBAAO,GAHkB,EAKrBG,mBAAS,IALY,mBAKxCC,EALwC,KAKjCC,EALiC,KA6B/C,OAtBAC,qBAAU,WAIT,IAFA,IAAMC,EAAYC,KAAKC,KAAKZ,EAAeI,EAAkBS,QAAQC,OAC/DC,EAAY,GACTC,EAAU,EAAGA,GAAWN,EAAWM,IAC3CD,EAAUE,KAAKD,GAEhBR,EAASO,KACP,CAACf,EAAcI,EAAkBS,QAAQC,QAe3C,0BAAMtB,UAAWC,IAAQyB,WACxB,yBAAK1B,UAAWC,IAAQ0B,gBACvB,2BAAOC,QAAQ,eAAf,eACA,2BACCC,KAAK,cACL7B,UAAWC,IAAQ6B,UACnBC,IAAKrB,EACLsB,YAAY,qBAGd,yBAAKhC,UAAWC,IAAQ0B,gBACvB,2BAAOC,QAAQ,YAAf,YACA,4BACCC,KAAK,WACLE,IAAKnB,EACLqB,SAAU,kBAAMjB,EAAS,MACxBb,EAAcE,eAAe6B,KAAI,SAACC,EAAMC,GAAP,OACjC,4BAAQC,IAAKD,EAAOd,MAAOa,GACzBA,QAKL,yBAAKnC,UAAWC,IAAQ0B,gBACvB,2BAAOC,QAAQ,cAAf,cACA,4BACCC,KAAK,aACLE,IAAKlB,EACLyB,SAA2B,IAAjBvB,EAAMwB,QACfxB,EAAMmB,KAAI,SAACC,EAAMC,GAAP,OACV,4BAAQC,IAAKD,EAAOd,MAAOa,GACzBA,QAKL,yBAAKnC,UAAWC,IAAQ0B,gBACvB,kBAAC,EAAD,CAAQ7B,QAAM,EAACD,eAlDlB,SAAwB2C,GAEvBA,EAAMC,iBAGNhC,EAAa,CACZL,WAAYM,EAAcW,QAAQC,MAClChB,WAAYO,EAAcQ,QAAQC,MAClCjB,eAAgBO,EAAkBS,QAAQC,UA0CzC,a,gBC/DWoB,MAbf,YAA0D,IAAnCb,EAAkC,EAAlCA,KAAMc,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAC3C,OACC,yBAAK7C,UAAWC,IAAQyC,aACvB,yBAAKI,IAAKD,EAAWE,IAAKlB,IAC1B,yBAAK7B,UAAWC,IAAQ+C,MACvB,2BAAOhD,UAAWC,IAAQgD,MAAOpB,GACjC,+BAAQc,GACR,+BAAQC,M,gBCANM,EAAO,+DAHO,cAGP,qBADY,mBACZ,iBAFO,eAyHLC,MArHf,SAAqBC,GAAO,MAEWtC,mBAAS,CAC9CV,WAAYD,EAAcC,WAC1BE,WAAYH,EAAcG,WAAW,GACrCD,eAAgBF,EAAcE,eAAe,KALnB,mBAEpBgD,EAFoB,KAEPC,EAFO,OASSxC,mBAAS,MATlB,mBASpByC,EAToB,KASRC,EATQ,OAUG1C,oBAAS,GAVZ,mBAUpB2C,EAVoB,KAUXC,EAVW,OAWS5C,mBAAS,CAC5CN,aAAc,EACdmD,QAASxD,EAAcE,eAAe,GACtCuD,YAAa,IAda,mBAWpBC,EAXoB,KAWRC,EAXQ,KAiB3B7C,qBAAU,WAET,GAAKoC,EAAYjD,WAAjB,CACAsD,GAAW,GAGX,IAAMK,EAAMb,EAAQc,QA5BF,cA4BuBX,EAAYjD,YACnD4D,QA5BgB,cA4BKX,EAAY/C,YACjC0D,QA5BqB,mBA4BKX,EAAYhD,gBAGxC4D,MAAMF,GACJG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACL,GAAIA,EAASE,MAAO,MAAMC,MAAMH,EAASE,OADxB,IAKD7D,EAIZ2D,EAJHI,cACUZ,EAGPQ,EAHHK,SACcZ,EAEXO,EAFHM,aACAC,EACGP,EADHO,YAIDZ,EAAc,CACbtD,eACAmD,UACAC,gBAIDF,GAAW,GAGXF,EACCkB,EAAYxC,KAAI,SAAAyC,GAAC,MAAK,CACrBC,GAAID,EAAEC,GACN/C,KAAM8C,EAAE9C,KACRc,QAASgC,EAAEhC,QACXC,KAAM+B,EAAE/B,KACRC,UAAW8B,EAAE9B,kBAIfgC,OAAM,SAAAR,GAENX,GAAW,GAEXF,EAAc,IAEdM,EAAc,CACbtD,aAAc,EACdmD,QAASxD,EAAcE,eAAe,GACtCuD,YAAa,IAGdkB,QAAQT,MAAMA,SAEd,CAAChB,IAKJ,IAKI0B,EAAS,KAcb,OAZIxB,IAGFwB,EADGxB,EAAWhB,OACLgB,EAAWrB,KAAI,SAAA6C,GAAM,OAC7B,kBAAC,EAAD,eAAa1C,IAAK0C,EAAOH,IAAQG,OAIzB,qBAKV,yBAAK/E,UAAWC,IAAQyB,WACvB,kBAAC,EAAD,CACCjB,aAtBoB,SAAAuE,GACtB1B,EAAe0B,IAsBbxE,aAAcqD,EAAWrD,eAE1B,yBAAKR,UAAWC,IAAQgF,eACtBxB,EACA,gFAEAsB,KC5GUG,MAVf,WACC,OACC,yBAAKlF,UAAU,OACd,mDACA,mGACA,kBAAC,EAAD,QCEiBmF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAR,GACLS,QAAQT,MAAMA,EAAM4B,c","file":"static/js/main.83440f44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"search_Container__2LByJ\",\"InputContainer\":\"search_InputContainer__2R1iJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplayItem\":\"displayItem_DisplayItem__3RD1X\",\"Name\":\"displayItem_Name__2Lri9\",\"Info\":\"displayItem_Info__brEMO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"displayList_Container__ciwUi\",\"DisplayLayout\":\"displayList_DisplayLayout__3QEEb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"button_Button__2zH03\"};","import React from 'react';\r\n\r\nimport classes from './button.module.css';\r\n\r\nfunction Button({ onClickHandler, submit }) {\r\n\treturn (\r\n\t\t<button\r\n\t\t\ttype={submit && 'submit'}\r\n\t\t\tclassName={classes.Button}\r\n\t\t\tonClick={onClickHandler}>\r\n\t\t\tSearch\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default Button;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport classes from './search.module.css';\r\n\r\nimport Button from '../ui/button/button';\r\n\r\n// Configure this as required.\r\nexport const SearchOptions = {\r\n\tsearchTerm: '',\r\n\tresultsPerPage: [5, 10, 15],\r\n\tpageNumber: 1\r\n};\r\n\r\nfunction Search({ totalRecords, clickHandler }) {\r\n\tconst searchTermRef = useRef('');\r\n\tconst resultsPerPageRef = useRef(0);\r\n\tconst pageNumberRef = useRef(0);\r\n\r\n\tconst [pages, setPages] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Dynamically set page count based on total records and records per page\r\n\t\tconst pageCount = Math.ceil(totalRecords / resultsPerPageRef.current.value);\r\n\t\tconst tempPages = [];\r\n\t\tfor (let counter = 1; counter <= pageCount; counter++) {\r\n\t\t\ttempPages.push(counter);\r\n\t\t}\r\n\t\tsetPages(tempPages);\r\n\t}, [totalRecords, resultsPerPageRef.current.value]);\r\n\r\n\tfunction onClickHandler(event) {\r\n\t\t// This prevents form from submitting.\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// Read the values from the input fields only when submit button is clicked\r\n\t\tclickHandler({\r\n\t\t\tsearchTerm: searchTermRef.current.value,\r\n\t\t\tpageNumber: pageNumberRef.current.value,\r\n\t\t\tresultsPerPage: resultsPerPageRef.current.value\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={classes.Container}>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<label htmlFor=\"search-term\">Search Term</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tname=\"search-term\"\r\n\t\t\t\t\tclassName={classes.TextInput}\r\n\t\t\t\t\tref={searchTermRef}\r\n\t\t\t\t\tplaceholder=\"enter city name\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<label htmlFor=\"per-page\">Per page</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tname=\"per-page\"\r\n\t\t\t\t\tref={resultsPerPageRef}\r\n\t\t\t\t\tonChange={() => setPages([])}>\r\n\t\t\t\t\t{SearchOptions.resultsPerPage.map((item, index) => (\r\n\t\t\t\t\t\t<option key={index} value={item}>\r\n\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<label htmlFor=\"go-to-page\">Go to Page</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tname=\"go-to-page\"\r\n\t\t\t\t\tref={pageNumberRef}\r\n\t\t\t\t\tdisabled={pages.length === 0}>\r\n\t\t\t\t\t{pages.map((item, index) => (\r\n\t\t\t\t\t\t<option key={index} value={item}>\r\n\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<Button submit onClickHandler={onClickHandler}>\r\n\t\t\t\t\tSearch\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nimport classes from './displayItem.module.scss';\r\n\r\nfunction DisplayItem({ name, address, city, image_url }) {\r\n\treturn (\r\n\t\t<div className={classes.DisplayItem}>\r\n\t\t\t<img src={image_url} alt={name} />\r\n\t\t\t<div className={classes.Info}>\r\n\t\t\t\t<label className={classes.Name}>{name}</label>\r\n\t\t\t\t<label>{address}</label>\r\n\t\t\t\t<label>{city}</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DisplayItem;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport Search, { SearchOptions } from '../search/search';\r\nimport DisplayItem from './displayItem/displayItem';\r\n\r\nimport classes from './displayList.module.css';\r\n\r\n// API\r\nconst SEARCH_TERM = 'SEARCH_TERM';\r\nconst PAGE_NUMBER = 'PAGE_NUMBER';\r\nconst RESULTS_PER_PAGE = 'RESULTS_PER_PAGE';\r\nconst API_URL = `https://opentable.herokuapp.com/api/restaurants?city=${SEARCH_TERM}&per_page=${RESULTS_PER_PAGE}&page=${PAGE_NUMBER}`;\r\n\r\nfunction DisplayList(props) {\r\n\t// Read default values from configured options\r\n\tconst [searchQuery, setSearchQuery] = useState({\r\n\t\tsearchTerm: SearchOptions.searchTerm,\r\n\t\tpageNumber: SearchOptions.pageNumber[0],\r\n\t\tresultsPerPage: SearchOptions.resultsPerPage[0]\r\n\t});\r\n\r\n\t// Initially set results to null\r\n\tconst [resultList, setResultList] = useState(null);\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [pagination, setPagination] = useState({\r\n\t\ttotalRecords: 0,\r\n\t\tperPage: SearchOptions.resultsPerPage[0],\r\n\t\tcurrentPage: 1\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\t// No need to proceed if search term not provided\r\n\t\tif (!searchQuery.searchTerm) return;\r\n\t\tsetLoading(true);\r\n\r\n\t\t// Set API dynamic query based on searchQuery\r\n\t\tconst url = API_URL.replace(SEARCH_TERM, searchQuery.searchTerm)\r\n\t\t\t.replace(PAGE_NUMBER, searchQuery.pageNumber)\r\n\t\t\t.replace(RESULTS_PER_PAGE, searchQuery.resultsPerPage);\r\n\r\n\t\t// Make api call and set value of result\r\n\t\tfetch(url)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tif (response.error) throw Error(response.error);\r\n\r\n\t\t\t\t// Read values from response\r\n\t\t\t\tconst {\r\n\t\t\t\t\ttotal_entries: totalRecords,\r\n\t\t\t\t\tper_page: perPage,\r\n\t\t\t\t\tcurrent_page: currentPage,\r\n\t\t\t\t\trestaurants\r\n\t\t\t\t} = response;\r\n\r\n\t\t\t\t// Set values for pagination based on records fetched\r\n\t\t\t\tsetPagination({\r\n\t\t\t\t\ttotalRecords,\r\n\t\t\t\t\tperPage,\r\n\t\t\t\t\tcurrentPage\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Set loading to false when promise is resolved\r\n\t\t\t\tsetLoading(false);\r\n\r\n\t\t\t\t// Prepare object from as many properties as required in the app\r\n\t\t\t\tsetResultList(\r\n\t\t\t\t\trestaurants.map(r => ({\r\n\t\t\t\t\t\tid: r.id,\r\n\t\t\t\t\t\tname: r.name,\r\n\t\t\t\t\t\taddress: r.address,\r\n\t\t\t\t\t\tcity: r.city,\r\n\t\t\t\t\t\timage_url: r.image_url\r\n\t\t\t\t\t}))\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\t// Set loading to false when promise is rejected\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\t// Reset results when error occurs\r\n\t\t\t\tsetResultList([]);\r\n\t\t\t\t// Reset pagination\r\n\t\t\t\tsetPagination({\r\n\t\t\t\t\ttotalRecords: 0,\r\n\t\t\t\t\tperPage: SearchOptions.resultsPerPage[0],\r\n\t\t\t\t\tcurrentPage: 1\r\n\t\t\t\t});\r\n\t\t\t\t// Log the error\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t});\r\n\t}, [searchQuery]);\r\n\r\n\t// Updating searchQuery state will cause re-render,\r\n\t// which in turn will re - evaluate useEffect for execution\r\n\t// useEffect has deps of searchQuery, so it will execute again\r\n\tconst onClickHandler = searchObject => {\r\n\t\tsetSearchQuery(searchObject);\r\n\t};\r\n\r\n\t// Initial value before search initiated\r\n\tlet result = null;\r\n\r\n\tif (resultList) {\r\n\t\t// Search returned at least one record\r\n\t\tif (resultList.length) {\r\n\t\t\tresult = resultList.map(result => (\r\n\t\t\t\t<DisplayItem key={result.id} {...result} />\r\n\t\t\t));\r\n\t\t} else {\r\n\t\t\t// Search returned 0 records\r\n\t\t\tresult = 'No records found!';\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.Container}>\r\n\t\t\t<Search\r\n\t\t\t\tclickHandler={onClickHandler}\r\n\t\t\t\ttotalRecords={pagination.totalRecords}\r\n\t\t\t/>\r\n\t\t\t<div className={classes.DisplayLayout}>\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<p>Please wait while we fetch your search results...</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\tresult\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DisplayList;\r\n","import React from 'react';\nimport './App.css';\n\nimport DisplayList from './components/displayList/displayList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h2>Search API Template</h2>\n\t\t\t<p>Enter name of a city and click Search to view a list of restaurants.</p>\n\t\t\t<DisplayList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}