{"version":3,"sources":["components/search/search.module.css","components/displayList/displayItem/displayItem.module.scss","components/displayList/displayList.module.css","components/search/search.js","components/displayList/displayItem/displayItem.js","components/displayList/displayList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchOptions","searchTerm","resultsPerPage","pageNumber","Search","props","searchTermRef","useRef","resultsPerPageRef","pageNumberRef","className","classes","Container","TextInput","ref","placeholder","map","item","index","key","value","type","Button","onClick","event","preventDefault","clickHandler","current","DisplayItem","name","address","city","image_url","src","alt","Info","Name","API_URL","DisplayList","useState","searchQuery","setSearchQuery","resultList","setResultList","loading","setLoading","useEffect","url","replace","fetch","then","response","json","error","Error","restaurants","r","id","catch","console","result","length","searchObject","DisplayLayout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.92540907.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"search_Container__2LByJ\",\"Button\":\"search_Button__3cpOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplayItem\":\"displayItem_DisplayItem__3RD1X\",\"Name\":\"displayItem_Name__2Lri9\",\"Info\":\"displayItem_Info__brEMO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"displayList_Container__ciwUi\",\"DisplayLayout\":\"displayList_DisplayLayout__3QEEb\"};","import React, { useRef } from 'react';\r\n\r\nimport classes from './search.module.css';\r\n\r\n// Configure this as required.\r\nexport const SearchOptions = {\r\n\tsearchTerm: '',\r\n\tresultsPerPage: [5, 10, 15],\r\n\tpageNumber: [1, 2, 3, 4, 5]\r\n};\r\n\r\nfunction Search(props) {\r\n\tconst searchTermRef = useRef('');\r\n\tconst resultsPerPageRef = useRef(0);\r\n\tconst pageNumberRef = useRef(0);\r\n\r\n\tfunction onClickHandler(event) {\r\n\t\t// This prevents form from submitting.\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// Read the values from the input fields only when submit button is clicked\r\n\t\tprops.clickHandler({\r\n\t\t\tsearchTerm: searchTermRef.current.value,\r\n\t\t\tpageNumber: pageNumberRef.current.value,\r\n\t\t\tresultsPerPage: resultsPerPageRef.current.value\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={classes.Container}>\r\n\t\t\t<label>Search Term</label>\r\n\t\t\t<input\r\n\t\t\t\tclassName={classes.TextInput}\r\n\t\t\t\tref={searchTermRef}\r\n\t\t\t\tplaceholder=\"enter city name\"\r\n\t\t\t/>\r\n\t\t\t<label>Per page</label>\r\n\t\t\t<select ref={resultsPerPageRef}>\r\n\t\t\t\t{SearchOptions.resultsPerPage.map((item, index) => (\r\n\t\t\t\t\t<option key={index} value={item}>\r\n\t\t\t\t\t\t{item}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t\t<label>Go to Page</label>\r\n\t\t\t<select ref={pageNumberRef}>\r\n\t\t\t\t{SearchOptions.pageNumber.map((item, index) => (\r\n\t\t\t\t\t<option key={index} value={item}>\r\n\t\t\t\t\t\t{item}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t\t<button type=\"submit\" className={classes.Button} onClick={onClickHandler}>\r\n\t\t\t\tSearch\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nimport classes from './displayItem.module.scss';\r\n\r\nfunction DisplayItem({ name, address, city, image_url }) {\r\n\treturn (\r\n\t\t<div className={classes.DisplayItem}>\r\n\t\t\t<img src={image_url} alt={name} />\r\n\t\t\t<div className={classes.Info}>\r\n\t\t\t\t<label className={classes.Name}>{name}</label>\r\n\t\t\t\t<label>{address}</label>\r\n\t\t\t\t<label>{city}</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DisplayItem;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport Search, { SearchOptions } from '../search/search';\r\nimport DisplayItem from './displayItem/displayItem';\r\n\r\nimport classes from './displayList.module.css';\r\n\r\n// API\r\nconst SEARCH_TERM = 'SEARCH_TERM';\r\nconst PAGE_NUMBER = 'PAGE_NUMBER';\r\nconst RESULTS_PER_PAGE = 'RESULTS_PER_PAGE';\r\nconst API_URL = `https://opentable.herokuapp.com/api/restaurants?city=${SEARCH_TERM}&per_page=${RESULTS_PER_PAGE}&page=${PAGE_NUMBER}`;\r\n\r\nfunction DisplayList(props) {\r\n\t// Read default values from configured options\r\n\tconst [searchQuery, setSearchQuery] = useState({\r\n\t\tsearchTerm: SearchOptions.searchTerm,\r\n\t\tpageNumber: SearchOptions.pageNumber[0],\r\n\t\tresultsPerPage: SearchOptions.resultsPerPage[0]\r\n\t});\r\n\r\n\t// Initially set results to null\r\n\tconst [resultList, setResultList] = useState(null);\r\n\tconst [loading, setLoading] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\t// No need to proceed if search term not provided\r\n\t\tif (!searchQuery.searchTerm) return;\r\n\t\tsetLoading(true);\r\n\r\n\t\t// Set API dynamic query based on searchQuery\r\n\t\tconst url = API_URL.replace(SEARCH_TERM, searchQuery.searchTerm)\r\n\t\t\t.replace(PAGE_NUMBER, searchQuery.pageNumber)\r\n\t\t\t.replace(RESULTS_PER_PAGE, searchQuery.resultsPerPage);\r\n\r\n\t\t// Make api call and set value of result\r\n\t\tfetch(url)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tif (response.error) throw Error(response.error);\r\n\r\n\t\t\t\t// Set loading to false when promise is resolved\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\t// Prepare object from as many properties as required in the app\r\n\t\t\t\tsetResultList(\r\n\t\t\t\t\tresponse.restaurants.map(r => ({\r\n\t\t\t\t\t\tid: r.id,\r\n\t\t\t\t\t\tname: r.name,\r\n\t\t\t\t\t\taddress: r.address,\r\n\t\t\t\t\t\tcity: r.city,\r\n\t\t\t\t\t\timage_url: r.image_url\r\n\t\t\t\t\t}))\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\t// Set loading to false when promise is rejected\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\t// Reset results when error occurs\r\n\t\t\t\tsetResultList([]);\r\n\t\t\t\t// Log the error\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t});\r\n\t}, [searchQuery]);\r\n\r\n\tconst onClickHandler = searchObject => {\r\n\t\t// Updating searchQuery state will cause re-render,\r\n\t\t// which in turn will re - evaluate useEffect for execution\r\n\t\t// useEffect has deps of searchQuery, so it will execute again\r\n\t\tsetSearchQuery(searchObject);\r\n\t};\r\n\r\n\t// Initial value before search initiated\r\n\tlet result = null;\r\n\r\n\tif (resultList) {\r\n\t\t// Search returned at least one record\r\n\t\tif (resultList.length) {\r\n\t\t\tresult = resultList.map(result => (\r\n\t\t\t\t<DisplayItem key={result.id} {...result} />\r\n\t\t\t));\r\n\t\t} else {\r\n\t\t\t// Search returned 0 records\r\n\t\t\tresult = 'No results found!';\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.Container}>\r\n\t\t\t<Search clickHandler={onClickHandler} />\r\n\t\t\t<div className={classes.DisplayLayout}>\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<p>Please wait while we fetch your search results...</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\tresult\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DisplayList;\r\n","import React from 'react';\nimport './App.css';\n\nimport DisplayList from './components/displayList/displayList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h2>Search API Template</h2>\n\t\t\t<p>Enter name of a city and click Search to view a list of restaurants.</p>\n\t\t\t<DisplayList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}