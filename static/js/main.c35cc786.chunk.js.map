{"version":3,"sources":["components/search/search.js","components/displayList/displayItem/displayItem.js","components/displayList/displayList.js","App.js","serviceWorker.js","index.js"],"names":["SearchOptions","searchTerm","resultsPerPage","pageNumber","Search","props","searchTermRef","useRef","resultsPerPageRef","pageNumberRef","className","classes","TextInput","ref","map","item","value","Button","onClick","event","preventDefault","clickHandler","current","DisplayItem","name","API_URL","DisplayList","useState","searchQuery","setSearchQuery","resultList","setResultList","useEffect","url","replace","fetch","then","response","json","results","restaurants","r","id","catch","error","console","searchObject","result","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6VAIaA,EAAgB,CAC5BC,WAAY,GACZC,eAAgB,CAAC,EAAG,GAAI,GAAI,IAC5BC,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAwCXC,MArCf,SAAgBC,GACf,IAAMC,EAAgBC,iBAAO,IACvBC,EAAoBD,iBAAO,GAC3BE,EAAgBF,iBAAO,GAW7B,OACC,oCACC,8CACA,2BAAOG,UAAWC,IAAQC,UAAWC,IAAKP,IAC1C,mDACA,4BAAQO,IAAKL,GACXR,EAAcE,eAAeY,KAAI,SAAAC,GAAI,OACrC,4BAAQC,MAAOD,GAAOA,OAGxB,6CACA,4BAAQF,IAAKJ,GACXT,EAAcG,WAAWW,KAAI,SAAAC,GAAI,OACjC,4BAAQC,MAAOD,GAAOA,OAGxB,4BAAQL,UAAWC,IAAQM,OAAQC,QAzBrC,SAAwBC,GACvBA,EAAMC,iBACNf,EAAMgB,aAAa,CAClBpB,WAAYK,EAAcgB,QAAQN,MAClCb,WAAYM,EAAca,QAAQN,MAClCd,eAAgBM,EAAkBc,QAAQN,UAoB1C,Y,MC5BYO,MARf,YAAgC,IAATC,EAAQ,EAARA,KACtB,OACC,oCACC,2BAAIA,KCGDC,G,MAAO,+DAHO,cAGP,qBADY,mBACZ,iBAFO,gBAgDLC,MA5Cf,SAAqBrB,GAAQ,IAAD,EACWsB,mBAAS,CAC9C1B,WAAYD,EAAcC,WAC1BE,WAAYH,EAAcG,WAAW,GACrCD,eAAgBF,EAAcE,eAAe,KAJnB,mBACpB0B,EADoB,KACPC,EADO,OAMSF,mBAAS,MANlB,mBAMpBG,EANoB,KAMRC,EANQ,KAgC3B,OAxBAC,qBAAU,WACT,GAAKJ,EAAY3B,WAAjB,CAEA,IAAMgC,EAAMR,EAAQS,QAhBF,cAgBuBN,EAAY3B,YACnDiC,QAhBgB,cAgBKN,EAAYzB,YACjC+B,QAhBqB,mBAgBKN,EAAY1B,gBAGxCiC,MAAMF,GACJG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACL,IAAME,EAAUF,EAASG,YACzBT,EAAcQ,EAAQzB,KAAI,SAAA2B,GAAC,MAAK,CAAEC,GAAID,EAAEC,GAAIlB,KAAMiB,EAAEjB,aAEpDmB,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,SAC7B,CAAChB,IAUH,oCACC,kBAAC,EAAD,CAAQP,aATa,SAAAyB,GAItBjB,EAAeiB,MAMbhB,EACEA,EAAWhB,KAAI,SAAAiC,GAAM,OACrB,kBAAC,EAAD,eAAaC,IAAKlB,EAAWY,IAAQK,OAErC,sBCrCSE,MATf,WACC,OACC,yBAAKvC,UAAU,OACd,mDACA,kBAAC,EAAD,QCGiBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoB,c","file":"static/js/main.c35cc786.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\n\r\nimport classes from './search.module.css';\r\n\r\nexport const SearchOptions = {\r\n\tsearchTerm: '',\r\n\tresultsPerPage: [5, 10, 15, 20],\r\n\tpageNumber: [1, 2, 3, 4, 5]\r\n};\r\n\r\nfunction Search(props) {\r\n\tconst searchTermRef = useRef('');\r\n\tconst resultsPerPageRef = useRef(0);\r\n\tconst pageNumberRef = useRef(0);\r\n\r\n\tfunction onClickHandler(event) {\r\n\t\tevent.preventDefault();\r\n\t\tprops.clickHandler({\r\n\t\t\tsearchTerm: searchTermRef.current.value,\r\n\t\t\tpageNumber: pageNumberRef.current.value,\r\n\t\t\tresultsPerPage: resultsPerPageRef.current.value\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<label>Search Term</label>\r\n\t\t\t<input className={classes.TextInput} ref={searchTermRef} />\r\n\t\t\t<label>Results per page</label>\r\n\t\t\t<select ref={resultsPerPageRef}>\r\n\t\t\t\t{SearchOptions.resultsPerPage.map(item => (\r\n\t\t\t\t\t<option value={item}>{item}</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t\t<label>Go to Page</label>\r\n\t\t\t<select ref={pageNumberRef}>\r\n\t\t\t\t{SearchOptions.pageNumber.map(item => (\r\n\t\t\t\t\t<option value={item}>{item}</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t\t<button className={classes.Button} onClick={onClickHandler}>\r\n\t\t\t\tSearch\r\n\t\t\t</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nimport classes from './displayItem.module.css';\r\n\r\nfunction DisplayItem({ name }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>{name}</p>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default DisplayItem;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport Search, { SearchOptions } from '../search/search';\r\nimport DisplayItem from './displayItem/displayItem';\r\n\r\nimport classes from './displayList.module.css';\r\n\r\nconst SEARCH_TERM = 'SEARCH_TERM';\r\nconst PAGE_NUMBER = 'PAGE_NUMBER';\r\nconst RESULTS_PER_PAGE = 'RESULTS_PER_PAGE';\r\nconst API_URL = `https://opentable.herokuapp.com/api/restaurants?city=${SEARCH_TERM}&per_page=${RESULTS_PER_PAGE}&page=${PAGE_NUMBER}`;\r\n\r\nfunction DisplayList(props) {\r\n\tconst [searchQuery, setSearchQuery] = useState({\r\n\t\tsearchTerm: SearchOptions.searchTerm,\r\n\t\tpageNumber: SearchOptions.pageNumber[0],\r\n\t\tresultsPerPage: SearchOptions.resultsPerPage[0]\r\n\t});\r\n\tconst [resultList, setResultList] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!searchQuery.searchTerm) return;\r\n\t\t// Set API dynamic query based on searchQuery\r\n\t\tconst url = API_URL.replace(SEARCH_TERM, searchQuery.searchTerm)\r\n\t\t\t.replace(PAGE_NUMBER, searchQuery.pageNumber)\r\n\t\t\t.replace(RESULTS_PER_PAGE, searchQuery.resultsPerPage);\r\n\r\n\t\t// Make api call and set value of result\r\n\t\tfetch(url)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst results = response.restaurants;\r\n\t\t\t\tsetResultList(results.map(r => ({ id: r.id, name: r.name })));\r\n\t\t\t})\r\n\t\t\t.catch(error => console.error(error));\r\n\t}, [searchQuery]);\r\n\r\n\tconst onClickHandler = searchObject => {\r\n\t\t// Updating searchQuery state will cause re-render,\r\n\t\t// which in turn will re - evaluate useEffect for execution\r\n\t\t// useEffect has deps of searchQuery, so it will execute again\r\n\t\tsetSearchQuery(searchObject);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Search clickHandler={onClickHandler} />\r\n\t\t\t{resultList\r\n\t\t\t\t? resultList.map(result => (\r\n\t\t\t\t\t\t<DisplayItem key={resultList.id} {...result} />\r\n\t\t\t\t  ))\r\n\t\t\t\t: 'No results found!'}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default DisplayList;\r\n","import React from 'react';\nimport './App.css';\n\nimport DisplayList from './components/displayList/displayList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h2>Search API Template</h2>\n\t\t\t<DisplayList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}